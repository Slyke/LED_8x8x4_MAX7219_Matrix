#include <avr/pgmspace.h>

// MAX7219 OP codes (https://datasheets.maximintegrated.com/en/ds/MAX7219-MAX7221.pdf)
#define OP_NOOP         0x00
#define OP_ROW_1        0x01
#define OP_ROW_2        0x02
#define OP_ROW_3        0x03
#define OP_ROW_4        0x04
#define OP_ROW_5        0x05
#define OP_ROW_6        0x06
#define OP_ROW_7        0x07
#define OP_ROW_8        0x08
#define OP_DECODE_MODE  0x09
#define OP_LED_BRIGHT   0x0A
#define OP_SCAN_LIMIT   0x0B
#define OP_SHUTDOWN     0x0C
#define OP_DISPLAY_TEST 0x0F

// Pins
#define CLK_PIN 13  // Clock
#define DTA_PIN 11  // Data In (DIN)
#define CHP_PIN 12  // Chip Select (CS)

// Chip Stuff
#define CHIP_COUNT 4
#define CHAR_HEIGHT 8
#define SCR_BUF_SIZE (CHIP_COUNT * CHAR_HEIGHT * 2)

unsigned long bufferLong [CHAR_HEIGHT * 2] = {0};

const unsigned char scrollText[] PROGMEM =
{
  " the quick brown fox jumped over the lazy dog.      THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG!        "
};
  
const long scrollDelay = 75;
const int delayTime = 1500;

#define SERIAL_DEBUG false

// If only Arduino had a better IDE, I could move all this into a Header file.
// *Sighs*

// The single number on the end is the size of the character (for kerning)
// Make sure you change CHAR_HEIGHT if you switch between 5x7 and 5x8 font.
// If you don't set the height, you will get very weird results.

const unsigned char font5x7 [] PROGMEM = {
    B00000000,  //Space (Char 0x20)
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    6,
 
    B10000000,  //!
    B10000000,
    B10000000,
    B10000000,
    B00000000,
    B00000000,
    B10000000,
    2,
 
    B10100000,  //"
    B10100000,
    B10100000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    4,
 
    B01010000,  //#
    B01010000,
    B11111000,
    B01010000,
    B11111000,
    B01010000,
    B01010000,
    6,
 
    B00100000,  //$
    B01111000,
    B10100000,
    B01110000,
    B00101000,
    B11110000,
    B00100000,
    6,
 
    B11000000,  //%
    B11001000,
    B00010000,
    B00100000,
    B01000000,
    B10011000,
    B00011000,
    6,
 
    B01100000,  //&
    B10010000,
    B10100000,
    B01000000,
    B10101000,
    B10010000,
    B01101000,
    6,
 
    B11000000,  //'
    B01000000,
    B10000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    3,
 
    B00100000,  //(
    B01000000,
    B10000000,
    B10000000,
    B10000000,
    B01000000,
    B00100000,
    4,
 
    B10000000,  //)
    B01000000,
    B00100000,
    B00100000,
    B00100000,
    B01000000,
    B10000000,
    4,
 
    B00000000,  //*
    B00100000,
    B10101000,
    B01110000,
    B10101000,
    B00100000,
    B00000000,
    6,
 
    B00000000,  //+
    B00100000,
    B00100000,
    B11111000,
    B00100000,
    B00100000,
    B00000000,
    6,
 
    B00000000,  //,
    B00000000,
    B00000000,
    B00000000,
    B11000000,
    B01000000,
    B10000000,
    3,
 
    B00000000,  //-
    B00000000,
    B11111000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    6,
 
    B00000000,  //.
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B11000000,
    B11000000,
    3,
 
    B00000000,  ///
    B00001000,
    B00010000,
    B00100000,
    B01000000,
    B10000000,
    B00000000,
    6,
 
    B01110000,  //0
    B10001000,
    B10011000,
    B10101000,
    B11001000,
    B10001000,
    B01110000,
    6,
 
    B01000000,  //1
    B11000000,
    B01000000,
    B01000000,
    B01000000,
    B01000000,
    B11100000,
    4,
 
    B01110000,  //2
    B10001000,
    B00001000,
    B00010000,
    B00100000,
    B01000000,
    B11111000,
    6,
 
    B11111000,  //3
    B00010000,
    B00100000,
    B00010000,
    B00001000,
    B10001000,
    B01110000,
    6,
 
    B00010000,  //4
    B00110000,
    B01010000,
    B10010000,
    B11111000,
    B00010000,
    B00010000,
    6,
 
    B11111000,  //5
    B10000000,
    B11110000,
    B00001000,
    B00001000,
    B10001000,
    B01110000,
    6,
 
    B00110000,  //6
    B01000000,
    B10000000,
    B11110000,
    B10001000,
    B10001000,
    B01110000,
    6,
 
    B11111000,  //7
    B10001000,
    B00001000,
    B00010000,
    B00100000,
    B00100000,
    B00100000,
    6,
 
    B01110000,  //8
    B10001000,
    B10001000,
    B01110000,
    B10001000,
    B10001000,
    B01110000,
    6,
 
    B01110000,  //9
    B10001000,
    B10001000,
    B01111000,
    B00001000,
    B00010000,
    B01100000,
    6,
 
    B00000000,  //:
    B11000000,
    B11000000,
    B00000000,
    B11000000,
    B11000000,
    B00000000,
    3,
 
    B00000000,  //;
    B11000000,
    B11000000,
    B00000000,
    B11000000,
    B01000000,
    B10000000,
    3,
 
    B00010000,  //<
    B00100000,
    B01000000,
    B10000000,
    B01000000,
    B00100000,
    B00010000,
    5,
 
    B00000000,  //=
    B00000000,
    B11111000,
    B00000000,
    B11111000,
    B00000000,
    B00000000,
    6,
 
    B10000000,  //>
    B01000000,
    B00100000,
    B00010000,
    B00100000,
    B01000000,
    B10000000,
    5,
 
    B01110000,  //?
    B10001000,
    B00001000,
    B00010000,
    B00100000,
    B00000000,
    B00100000,
    6,
 
    B01110000,  //@
    B10001000,
    B00001000,
    B01101000,
    B10101000,
    B10101000,
    B01110000,
    6,
 
    B01110000,  //A
    B10001000,
    B10001000,
    B10001000,
    B11111000,
    B10001000,
    B10001000,
    6,
 
    B11110000,  //B
    B10001000,
    B10001000,
    B11110000,
    B10001000,
    B10001000,
    B11110000,
    6,
 
    B01110000,  //C
    B10001000,
    B10000000,
    B10000000,
    B10000000,
    B10001000,
    B01110000,
    6,
 
    B11100000,  //D
    B10010000,
    B10001000,
    B10001000,
    B10001000,
    B10010000,
    B11100000,
    6,
 
    B11111000,  //E
    B10000000,
    B10000000,
    B11110000,
    B10000000,
    B10000000,
    B11111000,
    6,
 
    B11111000,  //F
    B10000000,
    B10000000,
    B11110000,
    B10000000,
    B10000000,
    B10000000,
    6,
 
    B01110000,  //G
    B10001000,
    B10000000,
    B10111000,
    B10001000,
    B10001000,
    B01111000,
    6,
 
    B10001000,  //H
    B10001000,
    B10001000,
    B11111000,
    B10001000,
    B10001000,
    B10001000,
    6,
 
    B11100000,  //I
    B01000000,
    B01000000,
    B01000000,
    B01000000,
    B01000000,
    B11100000,
    4,
 
    B00111000,  //J
    B00010000,
    B00010000,
    B00010000,
    B00010000,
    B10010000,
    B01100000,
    6,
 
    B10001000,  //K
    B10010000,
    B10100000,
    B11000000,
    B10100000,
    B10010000,
    B10001000,
    6,
 
    B10000000,  //L
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B11111000,
    6,
 
    B10001000,  //M
    B11011000,
    B10101000,
    B10101000,
    B10001000,
    B10001000,
    B10001000,
    6,
 
    B10001000,  //N
    B10001000,
    B11001000,
    B10101000,
    B10011000,
    B10001000,
    B10001000,
    6,
 
    B01110000,  //O
    B10001000,
    B10001000,
    B10001000,
    B10001000,
    B10001000,
    B01110000,
    6,
 
    B11110000,  //P
    B10001000,
    B10001000,
    B11110000,
    B10000000,
    B10000000,
    B10000000,
    6,
 
    B01110000,  //Q
    B10001000,
    B10001000,
    B10001000,
    B10101000,
    B10010000,
    B01101000,
    6,
 
    B11110000,  //R
    B10001000,
    B10001000,
    B11110000,
    B10100000,
    B10010000,
    B10001000,
    6,
 
    B01111000,  //S
    B10000000,
    B10000000,
    B01110000,
    B00001000,
    B00001000,
    B11110000,
    6,
 
    B11111000,  //T
    B00100000,
    B00100000,
    B00100000,
    B00100000,
    B00100000,
    B00100000,
    6,
 
    B10001000,  //U
    B10001000,
    B10001000,
    B10001000,
    B10001000,
    B10001000,
    B01110000,
    6,
 
    B10001000,  //V
    B10001000,
    B10001000,
    B10001000,
    B10001000,
    B01010000,
    B00100000,
    6,
 
    B10001000,  //W
    B10001000,
    B10001000,
    B10101000,
    B10101000,
    B10101000,
    B01010000,
    6,
 
    B10001000,  //X
    B10001000,
    B01010000,
    B00100000,
    B01010000,
    B10001000,
    B10001000,
    6,
 
    B10001000,  //Y
    B10001000,
    B10001000,
    B01010000,
    B00100000,
    B00100000,
    B00100000,
    6,
 
    B11111000,  //Z
    B00001000,
    B00010000,
    B00100000,
    B01000000,
    B10000000,
    B11111000,
    6,
 
    B11100000,  //[
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B11100000,
    4,
 
    B00000000,  //(Backward Slash)
    B10000000,
    B01000000,
    B00100000,
    B00010000,
    B00001000,
    B00000000,
    6,
 
    B11100000,  //]
    B00100000,
    B00100000,
    B00100000,
    B00100000,
    B00100000,
    B11100000,
    4,
 
    B00100000,  //^
    B01010000,
    B10001000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    6,
 
    B00000000,  //_
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B11111000,
    6,
 
    B10000000,  //`
    B01000000,
    B00100000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    4,
 
    B00000000,  //a
    B00000000,
    B01110000,
    B00001000,
    B01111000,
    B10001000,
    B01111000,
    6,
 
    B10000000,  //b
    B10000000,
    B10110000,
    B11001000,
    B10001000,
    B10001000,
    B11110000,
    6,
 
    B00000000,  //c
    B00000000,
    B01110000,
    B10001000,
    B10000000,
    B10001000,
    B01110000,
    6,
 
    B00001000,  //d
    B00001000,
    B01101000,
    B10011000,
    B10001000,
    B10001000,
    B01111000,
    6,
 
    B00000000,  //e
    B00000000,
    B01110000,
    B10001000,
    B11111000,
    B10000000,
    B01110000,
    6,
 
    B00110000,  //f
    B01001000,
    B01000000,
    B11100000,
    B01000000,
    B01000000,
    B01000000,
    6,
 
    B00000000,  //g
    B01111000,
    B10001000,
    B10001000,
    B01111000,
    B00001000,
    B01110000,
    6,
 
    B10000000,  //h
    B10000000,
    B10110000,
    B11001000,
    B10001000,
    B10001000,
    B10001000,
    6,
 
    B01000000,  //i
    B00000000,
    B11000000,
    B01000000,
    B01000000,
    B01000000,
    B11100000,
    4,
 
    B00010000,  //j
    B00000000,
    B00110000,
    B00010000,
    B00010000,
    B10010000,
    B01100000,
    5,
 
    B10000000,  //k
    B10000000,
    B10010000,
    B10100000,
    B11000000,
    B10100000,
    B10010000,
    5,
 
    B11000000,  //l
    B01000000,
    B01000000,
    B01000000,
    B01000000,
    B01000000,
    B11100000,
    4,
 
    B00000000,  //m
    B00000000,
    B11010000,
    B10101000,
    B10101000,
    B10001000,
    B10001000,
    6,
 
    B00000000,  //n
    B00000000,
    B10110000,
    B11001000,
    B10001000,
    B10001000,
    B10001000,
    6,
 
    B00000000,  //o
    B00000000,
    B01110000,
    B10001000,
    B10001000,
    B10001000,
    B01110000,
    6,
 
    B00000000,  //p
    B00000000,
    B11110000,
    B10001000,
    B11110000,
    B10000000,
    B10000000,
    6,
 
    B00000000,  //q
    B00000000,
    B01101000,
    B10011000,
    B01111000,
    B00001000,
    B00001000,
    6,
 
    B00000000,  //r
    B00000000,
    B10110000,
    B11001000,
    B10000000,
    B10000000,
    B10000000,
    6,
 
    B00000000,  //s
    B00000000,
    B01110000,
    B10000000,
    B01110000,
    B00001000,
    B11110000,
    6,
 
    B01000000,  //t
    B01000000,
    B11100000,
    B01000000,
    B01000000,
    B01001000,
    B00110000,
    6,
 
    B00000000,  //u
    B00000000,
    B10001000,
    B10001000,
    B10001000,
    B10011000,
    B01101000,
    6,
 
    B00000000,  //v
    B00000000,
    B10001000,
    B10001000,
    B10001000,
    B01010000,
    B00100000,
    6,
 
    B00000000,  //w
    B00000000,
    B10001000,
    B10101000,
    B10101000,
    B10101000,
    B01010000,
    6,
 
    B00000000,  //x
    B00000000,
    B10001000,
    B01010000,
    B00100000,
    B01010000,
    B10001000,
    6,
 
    B00000000,  //y
    B00000000,
    B10001000,
    B10001000,
    B01111000,
    B00001000,
    B01110000,
    6,
 
    B00000000,  //z
    B00000000,
    B11111000,
    B00010000,
    B00100000,
    B01000000,
    B11111000,
    6,
 
    B00100000,  //{
    B01000000,
    B01000000,
    B10000000,
    B01000000,
    B01000000,
    B00100000,
    4,
 
    B10000000,  //|
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    2,
 
    B10000000,  //}
    B01000000,
    B01000000,
    B00100000,
    B01000000,
    B01000000,
    B10000000,
    4,
 
    B00000000,  //~
    B00000000,
    B00000000,
    B01101000,
    B10010000,
    B00000000,
    B00000000,
    6,
 
    B01100000,  // (Char 0x7F)
    B10010000,
    B10010000,
    B01100000,
    B00000000,
    B00000000,
    B00000000,
    5
};


// *********************************
// 5x8 Chars Here
// *********************************


const unsigned char font5x8 [] PROGMEM = {

  //Space (Char 0x20)
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  6,

  //!
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B00000000,
  B00000000,
  B10000000,
  B00000000,
  2,

  //"
  B10100000,
  B10100000,
  B10100000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  4,

  //#
  B01010000,
  B01010000,
  B11111000,
  B01010000,
  B11111000,
  B01010000,
  B01010000,
  B00000000,
  6,

  //$
  B00100000,
  B01111000,
  B10100000,
  B01110000,
  B00101000,
  B11110000,
  B00100000,
  B00000000,
  6,

  //%
  B11000000,
  B11001000,
  B00010000,
  B00100000,
  B01000000,
  B10011000,
  B00011000,
  B00000000,
  6,

  //&
  B01100000,
  B10010000,
  B10100000,
  B01000000,
  B10101000,
  B10010000,
  B01101000,
  B00000000,
  6,

  //'
  B11000000,
  B01000000,
  B10000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  3,

  //(
  B00100000,
  B01000000,
  B10000000,
  B10000000,
  B10000000,
  B01000000,
  B00100000,
  B00000000,
  4,

  //)
  B10000000,
  B01000000,
  B00100000,
  B00100000,
  B00100000,
  B01000000,
  B10000000,
  B00000000,
  4,

  //*
  B00000000,
  B00100000,
  B10101000,
  B01110000,
  B10101000,
  B00100000,
  B00000000,
  B00000000,
  6,

  //+
  B00000000,
  B00100000,
  B00100000,
  B11111000,
  B00100000,
  B00100000,
  B00000000,
  B00000000,
  6,

  //,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B11000000,
  B01000000,
  B10000000,
  B00000000,
  3,

  //-
  B00000000,
  B00000000,
  B11111000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  6,

  //.
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B11000000,
  B11000000,
  B00000000,
  3,

  // / (Forward Slash)
  B00000000,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  B00000000,
  B00000000,
  6,

  //0
  B01110000,
  B10001000,
  B10011000,
  B10101000,
  B11001000,
  B10001000,
  B01110000,
  B00000000,
  6,

  //1
  B01000000,
  B11000000,
  B01000000,
  B01000000,
  B01000000,
  B01000000,
  B11100000,
  B00000000,
  4,

  //2
  B01110000,
  B10001000,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B11111000,
  B00000000,
  6,

  //3
  B11111000,
  B00010000,
  B00100000,
  B00010000,
  B00001000,
  B10001000,
  B01110000,
  B00000000,
  6,

  //4
  B00010000,
  B00110000,
  B01010000,
  B10010000,
  B11111000,
  B00010000,
  B00010000,
  B00000000,
  6,

  //5
  B11111000,
  B10000000,
  B11110000,
  B00001000,
  B00001000,
  B10001000,
  B01110000,
  B00000000,
  6,

  //6
  B00110000,
  B01000000,
  B10000000,
  B11110000,
  B10001000,
  B10001000,
  B01110000,
  B00000000,
  6,

  //7
  B11111000,
  B10001000,
  B00001000,
  B00010000,
  B00100000,
  B00100000,
  B00100000,
  B00000000,
  6,

  //8
  B01110000,
  B10001000,
  B10001000,
  B01110000,
  B10001000,
  B10001000,
  B01110000,
  B00000000,
  6,

  //9
  B01110000,
  B10001000,
  B10001000,
  B01111000,
  B00001000,
  B00010000,
  B01100000,
  B00000000,
  6,

  //:
  B00000000,
  B11000000,
  B11000000,
  B00000000,
  B11000000,
  B11000000,
  B00000000,
  B00000000,
  3,

  //;
  B00000000,
  B11000000,
  B11000000,
  B00000000,
  B11000000,
  B01000000,
  B10000000,
  B00000000,
  3,

  //<
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  B01000000,
  B00100000,
  B00010000,
  B00000000,
  5,

  //=
  B00000000,
  B00000000,
  B11111000,
  B00000000,
  B11111000,
  B00000000,
  B00000000,
  B00000000,
  6,

  //>
  B10000000,
  B01000000,
  B00100000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  B00000000,
  5,

  //?
  B01110000,
  B10001000,
  B00001000,
  B00010000,
  B00100000,
  B00000000,
  B00100000,
  B00000000,
  6,

  //@
  B01110000,
  B10001000,
  B00001000,
  B01101000,
  B10101000,
  B10101000,
  B01110000,
  B00000000,
  6,

  //A
  B01110000,
  B10001000,
  B10001000,
  B10001000,
  B11111000,
  B10001000,
  B10001000,
  B00000000,
  6,

  //B
  B11110000,
  B10001000,
  B10001000,
  B11110000,
  B10001000,
  B10001000,
  B11110000,
  B00000000,
  6,

  //C
  B01110000,
  B10001000,
  B10000000,
  B10000000,
  B10000000,
  B10001000,
  B01110000,
  B00000000,
  6,

  //D
  B11100000,
  B10010000,
  B10001000,
  B10001000,
  B10001000,
  B10010000,
  B11100000,
  B00000000,
  6,

  //E
  B11111000,
  B10000000,
  B10000000,
  B11110000,
  B10000000,
  B10000000,
  B11111000,
  B00000000,
  6,

  //F
  B11111000,
  B10000000,
  B10000000,
  B11110000,
  B10000000,
  B10000000,
  B10000000,
  B00000000,
  6,

  //G
  B01110000,
  B10001000,
  B10000000,
  B10111000,
  B10001000,
  B10001000,
  B01111000,
  B00000000,
  6,

  //H
  B10001000,
  B10001000,
  B10001000,
  B11111000,
  B10001000,
  B10001000,
  B10001000,
  B00000000,
  6,

  //I
  B11100000,
  B01000000,
  B01000000,
  B01000000,
  B01000000,
  B01000000,
  B11100000,
  B00000000,
  4,

  //J
  B00111000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B10010000,
  B01100000,
  B00000000,
  6,

  //K
  B10001000,
  B10010000,
  B10100000,
  B11000000,
  B10100000,
  B10010000,
  B10001000,
  B00000000,
  6,

  //L
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B11111000,
  B00000000,
  6,

  //M
  B10001000,
  B11011000,
  B10101000,
  B10101000,
  B10001000,
  B10001000,
  B10001000,
  B00000000,
  6,

  //N
  B10001000,
  B10001000,
  B11001000,
  B10101000,
  B10011000,
  B10001000,
  B10001000,
  B00000000,
  6,

  //O
  B01110000,
  B10001000,
  B10001000,
  B10001000,
  B10001000,
  B10001000,
  B01110000,
  B00000000,
  6,

  //P
  B11110000,
  B10001000,
  B10001000,
  B11110000,
  B10000000,
  B10000000,
  B10000000,
  B00000000,
  6,

  //Q
  B01110000,
  B10001000,
  B10001000,
  B10001000,
  B10101000,
  B10010000,
  B01101000,
  B00000000,
  6,

  //R
  B11110000,
  B10001000,
  B10001000,
  B11110000,
  B10100000,
  B10010000,
  B10001000,
  B00000000,
  6,

  //S
  B01111000,
  B10000000,
  B10000000,
  B01110000,
  B00001000,
  B00001000,
  B11110000,
  B00000000,
  6,

  //T
  B11111000,
  B00100000,
  B00100000,
  B00100000,
  B00100000,
  B00100000,
  B00100000,
  B00000000,
  6,

  //U
  B10001000,
  B10001000,
  B10001000,
  B10001000,
  B10001000,
  B10001000,
  B01110000,
  B00000000,
  6,

  //V
  B10001000,
  B10001000,
  B10001000,
  B10001000,
  B10001000,
  B01010000,
  B00100000,
  B00000000,
  6,

  //W
  B10001000,
  B10001000,
  B10001000,
  B10101000,
  B10101000,
  B10101000,
  B01010000,
  B00000000,
  6,

  //X
  B10001000,
  B10001000,
  B01010000,
  B00100000,
  B01010000,
  B10001000,
  B10001000,
  B00000000,
  6,

  //Y
  B10001000,
  B10001000,
  B10001000,
  B01010000,
  B00100000,
  B00100000,
  B00100000,
  B00000000,
  6,

  //Z
  B11111000,
  B00001000,
  B00010000,
  B00100000,
  B01000000,
  B10000000,
  B11111000,
  B00000000,
  6,

  //[
  B11100000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B11100000,
  B00000000,
  4,

  // \ (Backward Slash)
  B00000000,
  B10000000,
  B01000000,
  B00100000,
  B00010000,
  B00001000,
  B00000000,
  B00000000,
  6,

  //]
  B11100000,
  B00100000,
  B00100000,
  B00100000,
  B00100000,
  B00100000,
  B11100000,
  B00000000,
  4,

  //^
  B00100000,
  B01010000,
  B10001000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  6,

  //_
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B11111000,
  B00000000,
  6,

  //`
  B10000000,
  B01000000,
  B00100000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  4,

  //a
  B00000000,
  B00000000,
  B01110000,
  B00001000,
  B01111000,
  B10001000,
  B01111000,
  B00000000,
  6,

  //b
  B10000000,
  B10000000,
  B10110000,
  B11001000,
  B10001000,
  B10001000,
  B11110000,
  B00000000,
  6,

  //c
  B00000000,
  B00000000,
  B01110000,
  B10001000,
  B10000000,
  B10001000,
  B01110000,
  B00000000,
  6,

  //d
  B00001000,
  B00001000,
  B01101000,
  B10011000,
  B10001000,
  B10001000,
  B01111000,
  B00000000,
  6,

  //e
  B00000000,
  B00000000,
  B01110000,
  B10001000,
  B11111000,
  B10000000,
  B01110000,
  B00000000,
  6,

  //f
  B00110000,
  B01001000,
  B01000000,
  B11100000,
  B01000000,
  B01000000,
  B01000000,
  B00000000,
  6,

  //g
  B00000000,
  B00000000,
  B01111000,
  B10001000,
  B10001000,
  B01111000,
  B00001000,
  B01110000,
  6,

  //h
  B10000000,
  B10000000,
  B10110000,
  B11001000,
  B10001000,
  B10001000,
  B10001000,
  B00000000,
  6,

  //i
  B01000000,
  B00000000,
  B11000000,
  B01000000,
  B01000000,
  B01000000,
  B11100000,
  B00000000,
  4,

  //j
  B00010000,
  B00000000,
  B00110000,
  B00010000,
  B00010000,
  B10010000,
  B01100000,
  B00000000,
  5,

  //k
  B10000000,
  B10000000,
  B10010000,
  B10100000,
  B11000000,
  B10100000,
  B10010000,
  B00000000,
  5,

  //l
  B11000000,
  B01000000,
  B01000000,
  B01000000,
  B01000000,
  B01000000,
  B11100000,
  B00000000,
  4,

  //m
  B00000000,
  B00000000,
  B11010000,
  B10101000,
  B10101000,
  B10001000,
  B10001000,
  B00000000,
  6,

  //n
  B00000000,
  B00000000,
  B10110000,
  B11001000,
  B10001000,
  B10001000,
  B10001000,
  B00000000,
  6,

  //o
  B00000000,
  B00000000,
  B01110000,
  B10001000,
  B10001000,
  B10001000,
  B01110000,
  B00000000,
  6,

  //p
  B00000000,
  B00000000,
  B11110000,
  B10001000,
  B11110000,
  B10000000,
  B10000000,
  B00000000,
  6,

  //q
  B00000000,
  B00000000,
  B01101000,
  B10011000,
  B01111000,
  B00001000,
  B00001000,
  B00000000,
  6,

  //r
  B00000000,
  B00000000,
  B10110000,
  B11001000,
  B10000000,
  B10000000,
  B10000000,
  B00000000,
  6,
  
  //s
  B00000000,
  B00000000,
  B01110000,
  B10000000,
  B01110000,
  B00001000,
  B11110000,
  B00000000,
  6,

  //t
  B01000000,
  B01000000,
  B11100000,
  B01000000,
  B01000000,
  B01001000,
  B00110000,
  B00000000,
  6,

  //u
  B00000000,
  B00000000,
  B10001000,
  B10001000,
  B10001000,
  B10011000,
  B01101000,
  B00000000,
  6,

  //v
  B00000000,
  B00000000,
  B10001000,
  B10001000,
  B10001000,
  B01010000,
  B00100000,
  B00000000,
  6,

  //w
  B00000000,
  B00000000,
  B10001000,
  B10101000,
  B10101000,
  B10101000,
  B01010000,
  B00000000,
  6,

  //x
  B00000000,
  B00000000,
  B10001000,
  B01010000,
  B00100000,
  B01010000,
  B10001000,
  B00000000,
  6,

  //y
  B00000000,
  B00000000,
  B10001000,
  B10001000,
  B01111000,
  B00001000,
  B01110000,
  B00000000,
  6,

  //z
  B00000000,
  B00000000,
  B11111000,
  B00010000,
  B00100000,
  B01000000,
  B11111000,
  B00000000,
  6,

  //{
  B00100000,
  B01000000,
  B01000000,
  B10000000,
  B01000000,
  B01000000,
  B00100000,
  B00000000,
  4,

  //|
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B00000000,
  2,

  //}
  B10000000,
  B01000000,
  B01000000,
  B00100000,
  B01000000,
  B01000000,
  B10000000,
  B00000000,
  4,

  //~
  B00000000,
  B00000000,
  B00000000,
  B01101000,
  B10010000,
  B00000000,
  B00000000,
  B00000000,
  6,
  
  // (Char 0x7F)
  B01100000,
  B10010000,
  B10010000,
  B01100000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  5
};


void clearAllDisplays() {
  for (int i = 0; i < CHIP_COUNT; i++) {
    clearDisplay(i);
  }
}

void clearDisplay(int chipAddress) {
    int offset;

    offset = chipAddress * CHAR_HEIGHT;
    for(int i = 0; i < CHAR_HEIGHT; i++) {
      spiTransmit(chipAddress, i + 1, B00000000);
    }
}

// SPI communication
void spiTransmit(int chipAddress, byte opCode, byte data) {

  int offset = chipAddress * 2;
  int maxBytes = CHIP_COUNT * 2;

  byte spiData[maxBytes] = {};

  for(int i = 0; i < maxBytes; i++) {
    spiData[i] = 0x00;
  }

  spiData[offset] = data;
  spiData[offset + 1] = opCode;
  
  digitalWrite(CHP_PIN, LOW);

  for(int i = maxBytes; i > 0; i--) {
    shiftOut(DTA_PIN, CLK_PIN, MSBFIRST, spiData[i - 1]);

    if (SERIAL_DEBUG) {
      if (spiData[i-1] < 16) { Serial.print("0"); }
      Serial.print(spiData[i - 1], HEX);
      Serial.print(" ");
    }
  }
  
  if (SERIAL_DEBUG) {
    Serial.println("");
  }
  
  digitalWrite(CHP_PIN, HIGH);
}

void setup() {
  if (SERIAL_DEBUG) {
    Serial.begin(115200);
  }

  pinMode(CHP_PIN, OUTPUT);
  pinMode(CLK_PIN, OUTPUT);
  pinMode(DTA_PIN, OUTPUT);

  digitalWrite(CHP_PIN, HIGH);

  spiTransmit(0, OP_DISPLAY_TEST, 0x00);
  spiTransmit(1, OP_DISPLAY_TEST, 0x00);
  spiTransmit(2, OP_DISPLAY_TEST, 0x00);
  spiTransmit(3, OP_DISPLAY_TEST, 0x00);

  spiTransmit(0, OP_SCAN_LIMIT, 0x07);
  spiTransmit(1, OP_SCAN_LIMIT, 0x07);
  spiTransmit(2, OP_SCAN_LIMIT, 0x07);
  spiTransmit(3, OP_SCAN_LIMIT, 0x07);

  spiTransmit(0, OP_LED_BRIGHT, 0x09);
  spiTransmit(1, OP_LED_BRIGHT, 0x09);
  spiTransmit(2, OP_LED_BRIGHT, 0x09);
  spiTransmit(3, OP_LED_BRIGHT, 0x09);

  spiTransmit(0, OP_DECODE_MODE, 0x00);
  spiTransmit(1, OP_DECODE_MODE, 0x00);
  spiTransmit(2, OP_DECODE_MODE, 0x00);
  spiTransmit(3, OP_DECODE_MODE, 0x00);

  spiTransmit(0, OP_SHUTDOWN, 0x01);
  spiTransmit(1, OP_SHUTDOWN, 0x01);
  spiTransmit(2, OP_SHUTDOWN, 0x01);
  spiTransmit(3, OP_SHUTDOWN, 0x01);

  clearAllDisplays();

}

void loop() {  

  scrollMessage(scrollText);

  delay(delayTime);
  
  clearAllDisplays();
  
  delay(delayTime);

  // Binary Count
  for (uint8_t k = 0; k < 0x04; k++) { // 8x8 Screen
    for (byte j = 1; j <= 0x08; j++) { // Row
      for (byte i = 0; i <= 0xFE; i++) { // Column array
        spiTransmit(k, j, i + 1);
//        delay(1);
      }
    }
  }

  clearAllDisplays();
  
  delay(delayTime);

  scrollFont();

}

void scrollFont() {
  for (int counter = 0x20; counter < 0x80; counter++){
    loadBufferLong(counter);
    delay(250); // Delay after moving character on screen.
  }
}

void scrollMessage(const unsigned char * messageString) {
  int counter = 0;
  int myChar = 0;
  do {
    myChar = pgm_read_byte_near(messageString + counter);
    if (myChar != 0) {
      loadBufferLong(myChar);
    }
    counter++;
  }
  while (myChar != 0);
}

void loadBufferLong(int ascii) {
  if (ascii >= 0x20 && ascii <= 0xff) {
    for (int a = 0; a < CHAR_HEIGHT; a++) {
      unsigned long c = pgm_read_byte_near(font5x8 + ((ascii - 0x20) * (CHAR_HEIGHT + 1)) + a);
      unsigned long x = bufferLong[a * 2];
      x = x | c;
      bufferLong[a * 2] = x;
    }
    byte count = pgm_read_byte_near(font5x8 + ((ascii - 0x20) * (CHAR_HEIGHT + 1)) + 8);
//    byte count = 0x08; // Use this if you want a static character size.
    for (byte x = 0; x < count; x++) {
      rotateBufferLong();
      printBufferLong();
      delay(scrollDelay);
    }
  }
}

void rotateBufferLong() {
  for (int a = 0; a < CHAR_HEIGHT; a++) {
    unsigned long x = bufferLong [a * 2];
    byte b = bitRead(x, 31);
    x = x << 1;
    bufferLong[a * 2] = x;
    x = bufferLong[a * 2 + 1];
    x = x << 1;
    bitWrite(x, 0, b);
    bufferLong[a * 2 + 1] = x;
  }
}

void printBufferLong() {
  for (int a = 0; a < CHAR_HEIGHT; a++) {
    unsigned long x = bufferLong[a * 2 + 1];
    int addrOffset = 0;
    byte y = x;
    
    addrOffset = 3 * 8;
    spiTransmit(3, a + 1, y);

    x = bufferLong[a * 2];
    y = (x >> 24);
    addrOffset = 2 * 8;
    spiTransmit(2, a + 1, y);

    addrOffset = 1 * 8;
    y = (x >> 16);
    spiTransmit(1, a + 1, y);
    
    addrOffset = 0 * 8;
    y = (x >> 8);
    spiTransmit(0, a + 1, y);
  }
}

